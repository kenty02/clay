// @generated by protoc-gen-clay-server v0.1.0 with parameter "target=ts"
// @generated from file clay.proto (package clay, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Focus, GetFocusRequest, GetFocusResponse, HelloReply, HelloRequest, NodeUpdate, SelectFocusRequest } from "./clay_pb.js";
import { CrpcMethod } from "clay-rpc-server";
import { Empty } from "@bufbuild/protobuf";
import { Observable } from "rxjs";

/**
 * The greeting service definition.
 *
 * @generated from service clay.Greeter
 */
export interface GreeterController {
  /**
   * Sends a greeting
   *
   * @generated from rpc clay.Greeter.SayHello
   */
  sayHello(request: HelloRequest): Promise<HelloReply>;
}

export function GreeterMethods() {
  return function (constructor: Function) {
    for (const method of ["sayHello"]) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      CrpcMethod("clay.Greeter", "SayHello", false, false, HelloRequest, HelloReply)(constructor.prototype[method], method, descriptor);
    }
  };
}
/**
 * @generated from service clay.Clay
 */
export interface ClayController {
  /**
   * @generated from rpc clay.Clay.SubscribeNodeUpdates
   */
  subscribeNodeUpdates(request: Empty): Observable<NodeUpdate>;

  /**
   * @generated from rpc clay.Clay.SubscribeFocusUpdates
   */
  subscribeFocusUpdates(request: Empty): Observable<Focus>;

  /**
   * @generated from rpc clay.Clay.GetFocus
   */
  getFocus(request: GetFocusRequest): Promise<GetFocusResponse>;

  /**
   * @generated from rpc clay.Clay.SelectFocus
   */
  selectFocus(request: SelectFocusRequest): Promise<Empty>;
}

export function ClayMethods() {
  return function (constructor: Function) {
    for (const method of ["getFocus"]) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      CrpcMethod("clay.Clay", "GetFocus", false, false, GetFocusRequest, GetFocusResponse)(constructor.prototype[method], method, descriptor);
    }
    for (const method of ["selectFocus"]) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      CrpcMethod("clay.Clay", "SelectFocus", false, false, SelectFocusRequest, Empty)(constructor.prototype[method], method, descriptor);
    }
    for (const method of ["subscribeNodeUpdates"]) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      CrpcMethod("clay.Clay", "SubscribeNodeUpdates", false, true, Empty, NodeUpdate)(constructor.prototype[method], method, descriptor);
    }
    for (const method of ["subscribeFocusUpdates"]) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      CrpcMethod("clay.Clay", "SubscribeFocusUpdates", false, true, Empty, Focus)(constructor.prototype[method], method, descriptor);
    }
  };
}
